/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DepartmentReport } from "./DepartmentReport";
import { DepartmentReportCountArgs } from "./DepartmentReportCountArgs";
import { DepartmentReportFindManyArgs } from "./DepartmentReportFindManyArgs";
import { DepartmentReportFindUniqueArgs } from "./DepartmentReportFindUniqueArgs";
import { CreateDepartmentReportArgs } from "./CreateDepartmentReportArgs";
import { UpdateDepartmentReportArgs } from "./UpdateDepartmentReportArgs";
import { DeleteDepartmentReportArgs } from "./DeleteDepartmentReportArgs";
import { DepartmentReportService } from "../departmentReport.service";
@graphql.Resolver(() => DepartmentReport)
export class DepartmentReportResolverBase {
  constructor(protected readonly service: DepartmentReportService) {}

  async _departmentReportsMeta(
    @graphql.Args() args: DepartmentReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DepartmentReport])
  async departmentReports(
    @graphql.Args() args: DepartmentReportFindManyArgs
  ): Promise<DepartmentReport[]> {
    return this.service.departmentReports(args);
  }

  @graphql.Query(() => DepartmentReport, { nullable: true })
  async departmentReport(
    @graphql.Args() args: DepartmentReportFindUniqueArgs
  ): Promise<DepartmentReport | null> {
    const result = await this.service.departmentReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DepartmentReport)
  async createDepartmentReport(
    @graphql.Args() args: CreateDepartmentReportArgs
  ): Promise<DepartmentReport> {
    return await this.service.createDepartmentReport({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DepartmentReport)
  async updateDepartmentReport(
    @graphql.Args() args: UpdateDepartmentReportArgs
  ): Promise<DepartmentReport | null> {
    try {
      return await this.service.updateDepartmentReport({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DepartmentReport)
  async deleteDepartmentReport(
    @graphql.Args() args: DeleteDepartmentReportArgs
  ): Promise<DepartmentReport | null> {
    try {
      return await this.service.deleteDepartmentReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
