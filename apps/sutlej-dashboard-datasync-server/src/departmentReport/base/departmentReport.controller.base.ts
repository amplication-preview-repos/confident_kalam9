/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DepartmentReportService } from "../departmentReport.service";
import { DepartmentReportCreateInput } from "./DepartmentReportCreateInput";
import { DepartmentReport } from "./DepartmentReport";
import { DepartmentReportFindManyArgs } from "./DepartmentReportFindManyArgs";
import { DepartmentReportWhereUniqueInput } from "./DepartmentReportWhereUniqueInput";
import { DepartmentReportUpdateInput } from "./DepartmentReportUpdateInput";

export class DepartmentReportControllerBase {
  constructor(protected readonly service: DepartmentReportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DepartmentReport })
  async createDepartmentReport(
    @common.Body() data: DepartmentReportCreateInput
  ): Promise<DepartmentReport> {
    return await this.service.createDepartmentReport({
      data: data,
      select: {
        balance: true,
        cash: true,
        createdAt: true,
        department: true,
        discount: true,
        id: true,
        net: true,
        online: true,
        quantity: true,
        total: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DepartmentReport] })
  @ApiNestedQuery(DepartmentReportFindManyArgs)
  async departmentReports(
    @common.Req() request: Request
  ): Promise<DepartmentReport[]> {
    const args = plainToClass(DepartmentReportFindManyArgs, request.query);
    return this.service.departmentReports({
      ...args,
      select: {
        balance: true,
        cash: true,
        createdAt: true,
        department: true,
        discount: true,
        id: true,
        net: true,
        online: true,
        quantity: true,
        total: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DepartmentReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async departmentReport(
    @common.Param() params: DepartmentReportWhereUniqueInput
  ): Promise<DepartmentReport | null> {
    const result = await this.service.departmentReport({
      where: params,
      select: {
        balance: true,
        cash: true,
        createdAt: true,
        department: true,
        discount: true,
        id: true,
        net: true,
        online: true,
        quantity: true,
        total: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DepartmentReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDepartmentReport(
    @common.Param() params: DepartmentReportWhereUniqueInput,
    @common.Body() data: DepartmentReportUpdateInput
  ): Promise<DepartmentReport | null> {
    try {
      return await this.service.updateDepartmentReport({
        where: params,
        data: data,
        select: {
          balance: true,
          cash: true,
          createdAt: true,
          department: true,
          discount: true,
          id: true,
          net: true,
          online: true,
          quantity: true,
          total: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DepartmentReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDepartmentReport(
    @common.Param() params: DepartmentReportWhereUniqueInput
  ): Promise<DepartmentReport | null> {
    try {
      return await this.service.deleteDepartmentReport({
        where: params,
        select: {
          balance: true,
          cash: true,
          createdAt: true,
          department: true,
          discount: true,
          id: true,
          net: true,
          online: true,
          quantity: true,
          total: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
