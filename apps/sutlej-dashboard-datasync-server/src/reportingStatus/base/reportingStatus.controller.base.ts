/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReportingStatusService } from "../reportingStatus.service";
import { ReportingStatusCreateInput } from "./ReportingStatusCreateInput";
import { ReportingStatus } from "./ReportingStatus";
import { ReportingStatusFindManyArgs } from "./ReportingStatusFindManyArgs";
import { ReportingStatusWhereUniqueInput } from "./ReportingStatusWhereUniqueInput";
import { ReportingStatusUpdateInput } from "./ReportingStatusUpdateInput";

export class ReportingStatusControllerBase {
  constructor(protected readonly service: ReportingStatusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReportingStatus })
  async createReportingStatus(
    @common.Body() data: ReportingStatusCreateInput
  ): Promise<ReportingStatus> {
    return await this.service.createReportingStatus({
      data: data,
      select: {
        approvedAt: true,
        createdAt: true,
        date: true,
        deptNo: true,
        doneBy: true,
        id: true,
        investigationId: true,
        isRepeat: true,
        labNo: true,
        patientId: true,
        patientInAt: true,
        patientOutAt: true,
        repeatInAt: true,
        repeatOutAt: true,
        status: true,
        testId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReportingStatus] })
  @ApiNestedQuery(ReportingStatusFindManyArgs)
  async reportingStatuses(
    @common.Req() request: Request
  ): Promise<ReportingStatus[]> {
    const args = plainToClass(ReportingStatusFindManyArgs, request.query);
    return this.service.reportingStatuses({
      ...args,
      select: {
        approvedAt: true,
        createdAt: true,
        date: true,
        deptNo: true,
        doneBy: true,
        id: true,
        investigationId: true,
        isRepeat: true,
        labNo: true,
        patientId: true,
        patientInAt: true,
        patientOutAt: true,
        repeatInAt: true,
        repeatOutAt: true,
        status: true,
        testId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReportingStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async reportingStatus(
    @common.Param() params: ReportingStatusWhereUniqueInput
  ): Promise<ReportingStatus | null> {
    const result = await this.service.reportingStatus({
      where: params,
      select: {
        approvedAt: true,
        createdAt: true,
        date: true,
        deptNo: true,
        doneBy: true,
        id: true,
        investigationId: true,
        isRepeat: true,
        labNo: true,
        patientId: true,
        patientInAt: true,
        patientOutAt: true,
        repeatInAt: true,
        repeatOutAt: true,
        status: true,
        testId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReportingStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReportingStatus(
    @common.Param() params: ReportingStatusWhereUniqueInput,
    @common.Body() data: ReportingStatusUpdateInput
  ): Promise<ReportingStatus | null> {
    try {
      return await this.service.updateReportingStatus({
        where: params,
        data: data,
        select: {
          approvedAt: true,
          createdAt: true,
          date: true,
          deptNo: true,
          doneBy: true,
          id: true,
          investigationId: true,
          isRepeat: true,
          labNo: true,
          patientId: true,
          patientInAt: true,
          patientOutAt: true,
          repeatInAt: true,
          repeatOutAt: true,
          status: true,
          testId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReportingStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReportingStatus(
    @common.Param() params: ReportingStatusWhereUniqueInput
  ): Promise<ReportingStatus | null> {
    try {
      return await this.service.deleteReportingStatus({
        where: params,
        select: {
          approvedAt: true,
          createdAt: true,
          date: true,
          deptNo: true,
          doneBy: true,
          id: true,
          investigationId: true,
          isRepeat: true,
          labNo: true,
          patientId: true,
          patientInAt: true,
          patientOutAt: true,
          repeatInAt: true,
          repeatOutAt: true,
          status: true,
          testId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
