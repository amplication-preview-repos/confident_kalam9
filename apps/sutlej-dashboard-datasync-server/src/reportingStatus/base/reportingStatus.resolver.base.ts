/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ReportingStatus } from "./ReportingStatus";
import { ReportingStatusCountArgs } from "./ReportingStatusCountArgs";
import { ReportingStatusFindManyArgs } from "./ReportingStatusFindManyArgs";
import { ReportingStatusFindUniqueArgs } from "./ReportingStatusFindUniqueArgs";
import { CreateReportingStatusArgs } from "./CreateReportingStatusArgs";
import { UpdateReportingStatusArgs } from "./UpdateReportingStatusArgs";
import { DeleteReportingStatusArgs } from "./DeleteReportingStatusArgs";
import { ReportingStatusService } from "../reportingStatus.service";
@graphql.Resolver(() => ReportingStatus)
export class ReportingStatusResolverBase {
  constructor(protected readonly service: ReportingStatusService) {}

  async _reportingStatusesMeta(
    @graphql.Args() args: ReportingStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ReportingStatus])
  async reportingStatuses(
    @graphql.Args() args: ReportingStatusFindManyArgs
  ): Promise<ReportingStatus[]> {
    return this.service.reportingStatuses(args);
  }

  @graphql.Query(() => ReportingStatus, { nullable: true })
  async reportingStatus(
    @graphql.Args() args: ReportingStatusFindUniqueArgs
  ): Promise<ReportingStatus | null> {
    const result = await this.service.reportingStatus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ReportingStatus)
  async createReportingStatus(
    @graphql.Args() args: CreateReportingStatusArgs
  ): Promise<ReportingStatus> {
    return await this.service.createReportingStatus({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ReportingStatus)
  async updateReportingStatus(
    @graphql.Args() args: UpdateReportingStatusArgs
  ): Promise<ReportingStatus | null> {
    try {
      return await this.service.updateReportingStatus({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReportingStatus)
  async deleteReportingStatus(
    @graphql.Args() args: DeleteReportingStatusArgs
  ): Promise<ReportingStatus | null> {
    try {
      return await this.service.deleteReportingStatus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
