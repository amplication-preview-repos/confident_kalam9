/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DiscountReport } from "./DiscountReport";
import { DiscountReportCountArgs } from "./DiscountReportCountArgs";
import { DiscountReportFindManyArgs } from "./DiscountReportFindManyArgs";
import { DiscountReportFindUniqueArgs } from "./DiscountReportFindUniqueArgs";
import { CreateDiscountReportArgs } from "./CreateDiscountReportArgs";
import { UpdateDiscountReportArgs } from "./UpdateDiscountReportArgs";
import { DeleteDiscountReportArgs } from "./DeleteDiscountReportArgs";
import { DiscountReportService } from "../discountReport.service";
@graphql.Resolver(() => DiscountReport)
export class DiscountReportResolverBase {
  constructor(protected readonly service: DiscountReportService) {}

  async _discountReportsMeta(
    @graphql.Args() args: DiscountReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DiscountReport])
  async discountReports(
    @graphql.Args() args: DiscountReportFindManyArgs
  ): Promise<DiscountReport[]> {
    return this.service.discountReports(args);
  }

  @graphql.Query(() => DiscountReport, { nullable: true })
  async discountReport(
    @graphql.Args() args: DiscountReportFindUniqueArgs
  ): Promise<DiscountReport | null> {
    const result = await this.service.discountReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DiscountReport)
  async createDiscountReport(
    @graphql.Args() args: CreateDiscountReportArgs
  ): Promise<DiscountReport> {
    return await this.service.createDiscountReport({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DiscountReport)
  async updateDiscountReport(
    @graphql.Args() args: UpdateDiscountReportArgs
  ): Promise<DiscountReport | null> {
    try {
      return await this.service.updateDiscountReport({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DiscountReport)
  async deleteDiscountReport(
    @graphql.Args() args: DeleteDiscountReportArgs
  ): Promise<DiscountReport | null> {
    try {
      return await this.service.deleteDiscountReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
