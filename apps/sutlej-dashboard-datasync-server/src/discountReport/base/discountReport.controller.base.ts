/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DiscountReportService } from "../discountReport.service";
import { DiscountReportCreateInput } from "./DiscountReportCreateInput";
import { DiscountReport } from "./DiscountReport";
import { DiscountReportFindManyArgs } from "./DiscountReportFindManyArgs";
import { DiscountReportWhereUniqueInput } from "./DiscountReportWhereUniqueInput";
import { DiscountReportUpdateInput } from "./DiscountReportUpdateInput";

export class DiscountReportControllerBase {
  constructor(protected readonly service: DiscountReportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DiscountReport })
  async createDiscountReport(
    @common.Body() data: DiscountReportCreateInput
  ): Promise<DiscountReport> {
    return await this.service.createDiscountReport({
      data: data,
      select: {
        approvedBy: true,
        createdAt: true,
        discount: true,
        discountDate: true,
        discountReason: true,
        id: true,
        labNo: true,
        panelName: true,
        patientName: true,
        total: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DiscountReport] })
  @ApiNestedQuery(DiscountReportFindManyArgs)
  async discountReports(
    @common.Req() request: Request
  ): Promise<DiscountReport[]> {
    const args = plainToClass(DiscountReportFindManyArgs, request.query);
    return this.service.discountReports({
      ...args,
      select: {
        approvedBy: true,
        createdAt: true,
        discount: true,
        discountDate: true,
        discountReason: true,
        id: true,
        labNo: true,
        panelName: true,
        patientName: true,
        total: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DiscountReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async discountReport(
    @common.Param() params: DiscountReportWhereUniqueInput
  ): Promise<DiscountReport | null> {
    const result = await this.service.discountReport({
      where: params,
      select: {
        approvedBy: true,
        createdAt: true,
        discount: true,
        discountDate: true,
        discountReason: true,
        id: true,
        labNo: true,
        panelName: true,
        patientName: true,
        total: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DiscountReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDiscountReport(
    @common.Param() params: DiscountReportWhereUniqueInput,
    @common.Body() data: DiscountReportUpdateInput
  ): Promise<DiscountReport | null> {
    try {
      return await this.service.updateDiscountReport({
        where: params,
        data: data,
        select: {
          approvedBy: true,
          createdAt: true,
          discount: true,
          discountDate: true,
          discountReason: true,
          id: true,
          labNo: true,
          panelName: true,
          patientName: true,
          total: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DiscountReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDiscountReport(
    @common.Param() params: DiscountReportWhereUniqueInput
  ): Promise<DiscountReport | null> {
    try {
      return await this.service.deleteDiscountReport({
        where: params,
        select: {
          approvedBy: true,
          createdAt: true,
          discount: true,
          discountDate: true,
          discountReason: true,
          id: true,
          labNo: true,
          panelName: true,
          patientName: true,
          total: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
