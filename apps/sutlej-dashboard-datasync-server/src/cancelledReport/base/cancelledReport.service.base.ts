/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CancelledReport as PrismaCancelledReport,
} from "@prisma/client";

export class CancelledReportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CancelledReportCountArgs, "select">
  ): Promise<number> {
    return this.prisma.cancelledReport.count(args);
  }

  async cancelledReports<T extends Prisma.CancelledReportFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CancelledReportFindManyArgs>
  ): Promise<PrismaCancelledReport[]> {
    return this.prisma.cancelledReport.findMany<Prisma.CancelledReportFindManyArgs>(
      args
    );
  }
  async cancelledReport<T extends Prisma.CancelledReportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CancelledReportFindUniqueArgs>
  ): Promise<PrismaCancelledReport | null> {
    return this.prisma.cancelledReport.findUnique(args);
  }
  async createCancelledReport<T extends Prisma.CancelledReportCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CancelledReportCreateArgs>
  ): Promise<PrismaCancelledReport> {
    return this.prisma.cancelledReport.create<T>(args);
  }
  async updateCancelledReport<T extends Prisma.CancelledReportUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CancelledReportUpdateArgs>
  ): Promise<PrismaCancelledReport> {
    return this.prisma.cancelledReport.update<T>(args);
  }
  async deleteCancelledReport<T extends Prisma.CancelledReportDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CancelledReportDeleteArgs>
  ): Promise<PrismaCancelledReport> {
    return this.prisma.cancelledReport.delete(args);
  }
}
