/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CancelledReportService } from "../cancelledReport.service";
import { CancelledReportCreateInput } from "./CancelledReportCreateInput";
import { CancelledReport } from "./CancelledReport";
import { CancelledReportFindManyArgs } from "./CancelledReportFindManyArgs";
import { CancelledReportWhereUniqueInput } from "./CancelledReportWhereUniqueInput";
import { CancelledReportUpdateInput } from "./CancelledReportUpdateInput";

export class CancelledReportControllerBase {
  constructor(protected readonly service: CancelledReportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CancelledReport })
  async createCancelledReport(
    @common.Body() data: CancelledReportCreateInput
  ): Promise<CancelledReport> {
    return await this.service.createCancelledReport({
      data: data,
      select: {
        cancelDate: true,
        cancelledBy: true,
        cancelReason: true,
        createdAt: true,
        discount: true,
        generatedBy: true,
        id: true,
        investigation: true,
        labNo: true,
        net: true,
        paidAmount: true,
        patientAge: true,
        patientName: true,
        paymentMode: true,
        referredBy: true,
        total: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CancelledReport] })
  @ApiNestedQuery(CancelledReportFindManyArgs)
  async cancelledReports(
    @common.Req() request: Request
  ): Promise<CancelledReport[]> {
    const args = plainToClass(CancelledReportFindManyArgs, request.query);
    return this.service.cancelledReports({
      ...args,
      select: {
        cancelDate: true,
        cancelledBy: true,
        cancelReason: true,
        createdAt: true,
        discount: true,
        generatedBy: true,
        id: true,
        investigation: true,
        labNo: true,
        net: true,
        paidAmount: true,
        patientAge: true,
        patientName: true,
        paymentMode: true,
        referredBy: true,
        total: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CancelledReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cancelledReport(
    @common.Param() params: CancelledReportWhereUniqueInput
  ): Promise<CancelledReport | null> {
    const result = await this.service.cancelledReport({
      where: params,
      select: {
        cancelDate: true,
        cancelledBy: true,
        cancelReason: true,
        createdAt: true,
        discount: true,
        generatedBy: true,
        id: true,
        investigation: true,
        labNo: true,
        net: true,
        paidAmount: true,
        patientAge: true,
        patientName: true,
        paymentMode: true,
        referredBy: true,
        total: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CancelledReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCancelledReport(
    @common.Param() params: CancelledReportWhereUniqueInput,
    @common.Body() data: CancelledReportUpdateInput
  ): Promise<CancelledReport | null> {
    try {
      return await this.service.updateCancelledReport({
        where: params,
        data: data,
        select: {
          cancelDate: true,
          cancelledBy: true,
          cancelReason: true,
          createdAt: true,
          discount: true,
          generatedBy: true,
          id: true,
          investigation: true,
          labNo: true,
          net: true,
          paidAmount: true,
          patientAge: true,
          patientName: true,
          paymentMode: true,
          referredBy: true,
          total: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CancelledReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCancelledReport(
    @common.Param() params: CancelledReportWhereUniqueInput
  ): Promise<CancelledReport | null> {
    try {
      return await this.service.deleteCancelledReport({
        where: params,
        select: {
          cancelDate: true,
          cancelledBy: true,
          cancelReason: true,
          createdAt: true,
          discount: true,
          generatedBy: true,
          id: true,
          investigation: true,
          labNo: true,
          net: true,
          paidAmount: true,
          patientAge: true,
          patientName: true,
          paymentMode: true,
          referredBy: true,
          total: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
